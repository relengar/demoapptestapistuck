swagger: '2.0'

info:
  x-ibm-name: loopback-example-app
  version: 1.0.0
  title: loopback-example-app

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  /Cars:
    post:
      tags:
        - Car
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Car.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    put:
      tags:
        - Car
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Car.upsert__put_Cars
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    patch:
      tags:
        - Car
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Car.upsert__patch_Cars
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    get:
      tags:
        - Car
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Car.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Car'
      deprecated: false
  /Cars/replaceOrCreate:
    post:
      tags:
        - Car
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Car.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  /Cars/upsertWithWhere:
    post:
      tags:
        - Car
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Car.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  '/Cars/{id}/exists':
    get:
      tags:
        - Car
      summary: Check whether a model instance exists in the data source.
      operationId: 'Car.exists__get_Cars_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Cars/{id}':
    head:
      tags:
        - Car
      summary: Check whether a model instance exists in the data source.
      operationId: 'Car.exists__head_Cars_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Car
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Car.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    delete:
      tags:
        - Car
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Car.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Car
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Car.prototype.updateAttributes__put_Cars_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Car'
        - name: id
          in: path
          description: Car id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    patch:
      tags:
        - Car
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Car.prototype.updateAttributes__patch_Cars_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Car'
        - name: id
          in: path
          description: Car id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  '/Cars/{id}/replace':
    post:
      tags:
        - Car
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Car.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  /Cars/findOne:
    get:
      tags:
        - Car
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Car.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  /Cars/update:
    post:
      tags:
        - Car
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Car.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Cars/count:
    get:
      tags:
        - Car
      summary: Count instances of the model matched by where from the data source.
      operationId: Car.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Customers/{id}/accessTokens/{fk}':
    get:
      tags:
        - Customer
      summary: Find a related item by id for accessTokens.
      operationId: Customer.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Customer
      summary: Delete a related item by id for accessTokens.
      operationId: Customer.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Customer
      summary: Update a related item by id for accessTokens.
      operationId: Customer.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Customers/{id}/accessTokens':
    get:
      tags:
        - Customer
      summary: Queries accessTokens of Customer.
      operationId: Customer.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Customer
      summary: Creates a new instance in accessTokens of this model.
      operationId: Customer.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Customer
      summary: Deletes all accessTokens of this model.
      operationId: Customer.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Customers/{id}/accessTokens/count':
    get:
      tags:
        - Customer
      summary: Counts accessTokens of Customer.
      operationId: Customer.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Customers:
    post:
      tags:
        - Customer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Customer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
        - Customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Customer.upsert__put_Customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Customer.upsert__patch_Customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    get:
      tags:
        - Customer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Customer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/replaceOrCreate:
    post:
      tags:
        - Customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Customer.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/upsertWithWhere:
    post:
      tags:
        - Customer
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Customer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/exists':
    get:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__get_Customers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Customers/{id}':
    head:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__head_Customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Customer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Customer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    delete:
      tags:
        - Customer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Customer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Customer.prototype.updateAttributes__put_Customers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Customer.prototype.updateAttributes__patch_Customers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/replace':
    post:
      tags:
        - Customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Customer.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/findOne:
    get:
      tags:
        - Customer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Customer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/update:
    post:
      tags:
        - Customer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Customer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Customers/count:
    get:
      tags:
        - Customer
      summary: Count instances of the model matched by where from the data source.
      operationId: Customer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Customers/login:
    post:
      tags:
        - Customer
      summary: Login a user with username/email and password.
      operationId: Customer.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Customers/logout:
    post:
      tags:
        - Customer
      summary: Logout a user with access token.
      operationId: Customer.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Customers/confirm:
    get:
      tags:
        - Customer
      summary: Confirm a user registration with email verification token.
      operationId: Customer.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Customers/reset:
    post:
      tags:
        - Customer
      summary: Reset password for a user with email.
      operationId: Customer.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /inventory:
    post:
      tags:
        - Inventory
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Inventory.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    put:
      tags:
        - Inventory
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Inventory.upsert__put_inventory
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    patch:
      tags:
        - Inventory
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Inventory.upsert__patch_inventory
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    get:
      tags:
        - Inventory
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Inventory.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Inventory'
      deprecated: false
  /inventory/replaceOrCreate:
    post:
      tags:
        - Inventory
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Inventory.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  /inventory/upsertWithWhere:
    post:
      tags:
        - Inventory
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Inventory.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  '/inventory/{id}/exists':
    get:
      tags:
        - Inventory
      summary: Check whether a model instance exists in the data source.
      operationId: 'Inventory.exists__get_inventory_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/inventory/{id}':
    head:
      tags:
        - Inventory
      summary: Check whether a model instance exists in the data source.
      operationId: 'Inventory.exists__head_inventory_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Inventory
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Inventory.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    delete:
      tags:
        - Inventory
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Inventory.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Inventory
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Inventory.prototype.updateAttributes__put_inventory_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Inventory'
        - name: id
          in: path
          description: Inventory id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    patch:
      tags:
        - Inventory
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Inventory.prototype.updateAttributes__patch_inventory_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Inventory'
        - name: id
          in: path
          description: Inventory id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  '/inventory/{id}/replace':
    post:
      tags:
        - Inventory
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Inventory.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  /inventory/findOne:
    get:
      tags:
        - Inventory
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Inventory.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  /inventory/update:
    post:
      tags:
        - Inventory
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Inventory.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /inventory/count:
    get:
      tags:
        - Inventory
      summary: Count instances of the model matched by where from the data source.
      operationId: Inventory.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Locations/{id}/inventory/{fk}':
    get:
      tags:
        - Location
      summary: Find a related item by id for inventory.
      operationId: Location.prototype.__findById__inventory
      parameters:
        - name: fk
          in: path
          description: Foreign key for inventory
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    delete:
      tags:
        - Location
      summary: Delete a related item by id for inventory.
      operationId: Location.prototype.__destroyById__inventory
      parameters:
        - name: fk
          in: path
          description: Foreign key for inventory
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Location
      summary: Update a related item by id for inventory.
      operationId: Location.prototype.__updateById__inventory
      parameters:
        - name: fk
          in: path
          description: Foreign key for inventory
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Inventory'
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
  '/Locations/{id}/inventory':
    get:
      tags:
        - Location
      summary: Queries inventory of Location.
      operationId: Location.prototype.__get__inventory
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Inventory'
      deprecated: false
    post:
      tags:
        - Location
      summary: Creates a new instance in inventory of this model.
      operationId: Location.prototype.__create__inventory
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Inventory'
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Inventory'
      deprecated: false
    delete:
      tags:
        - Location
      summary: Deletes all inventory of this model.
      operationId: Location.prototype.__delete__inventory
      parameters:
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Locations/{id}/inventory/count':
    get:
      tags:
        - Location
      summary: Counts inventory of Location.
      operationId: Location.prototype.__count__inventory
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Locations:
    post:
      tags:
        - Location
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Location.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
    put:
      tags:
        - Location
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Location.upsert__put_Locations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
    patch:
      tags:
        - Location
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Location.upsert__patch_Locations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
    get:
      tags:
        - Location
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Location.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
      deprecated: false
  /Locations/replaceOrCreate:
    post:
      tags:
        - Location
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Location.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
  /Locations/upsertWithWhere:
    post:
      tags:
        - Location
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Location.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
  '/Locations/{id}/exists':
    get:
      tags:
        - Location
      summary: Check whether a model instance exists in the data source.
      operationId: 'Location.exists__get_Locations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Locations/{id}':
    head:
      tags:
        - Location
      summary: Check whether a model instance exists in the data source.
      operationId: 'Location.exists__head_Locations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Location
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Location.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
    delete:
      tags:
        - Location
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Location.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Location
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Location.prototype.updateAttributes__put_Locations_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Location'
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
    patch:
      tags:
        - Location
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Location.prototype.updateAttributes__patch_Locations_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Location'
        - name: id
          in: path
          description: Location id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
  '/Locations/{id}/replace':
    post:
      tags:
        - Location
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Location.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
  /Locations/findOne:
    get:
      tags:
        - Location
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Location.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Location'
      deprecated: false
  /Locations/update:
    post:
      tags:
        - Location
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Location.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Locations/count:
    get:
      tags:
        - Location
      summary: Count instances of the model matched by where from the data source.
      operationId: Location.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Locations/nearby:
    get:
      tags:
        - Location
      summary: Find nearby locations around the geo point
      operationId: Location.nearby
      parameters:
        - name: here
          in: query
          description: 'geo location (lng & lat)'
          required: true
          type: string
          format: JSON
        - name: page
          in: query
          description: number of pages (page size=10)
          required: false
          type: number
          format: double
        - name: max
          in: query
          description: max distance in miles
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/x-any'
      deprecated: false
  /notes:
    post:
      tags:
        - Note
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Note.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    put:
      tags:
        - Note
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Note.upsert__put_notes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    patch:
      tags:
        - Note
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Note.upsert__patch_notes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    get:
      tags:
        - Note
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Note.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
      deprecated: false
  /notes/replaceOrCreate:
    post:
      tags:
        - Note
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Note.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /notes/upsertWithWhere:
    post:
      tags:
        - Note
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Note.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/notes/{id}/exists':
    get:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__get_notes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/notes/{id}':
    head:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__head_notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Note
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Note.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    delete:
      tags:
        - Note
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Note.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Note
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Note.prototype.updateAttributes__put_notes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
        - name: id
          in: path
          description: Note id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    patch:
      tags:
        - Note
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Note.prototype.updateAttributes__patch_notes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
        - name: id
          in: path
          description: Note id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/notes/{id}/replace':
    post:
      tags:
        - Note
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Note.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /notes/findOne:
    get:
      tags:
        - Note
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Note.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /notes/update:
    post:
      tags:
        - Note
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Note.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /notes/count:
    get:
      tags:
        - Note
      summary: Count instances of the model matched by where from the data source.
      operationId: Note.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /gTrends:
    post:
      tags:
        - gTrends
      summary: Create a new instance of the model and persist it into the data source.
      operationId: gTrends.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
    put:
      tags:
        - gTrends
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: gTrends.upsert__put_gTrends
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
    patch:
      tags:
        - gTrends
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: gTrends.upsert__patch_gTrends
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
    get:
      tags:
        - gTrends
      summary: Find all instances of the model matched by filter from the data source.
      operationId: gTrends.find
      parameters:
        - name: msg
          in: query
          required: false
          type: string
      # parameters:
      #   - name: filter
      #     in: query
      #     description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
      #     required: false
      #     type: string
      #     format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/gTrends'
      deprecated: false
  /gTrends/replaceOrCreate:
    post:
      tags:
        - gTrends
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: gTrends.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
  /gTrends/upsertWithWhere:
    post:
      tags:
        - gTrends
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: gTrends.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
  '/gTrends/{id}/exists':
    get:
      tags:
        - gTrends
      summary: Check whether a model instance exists in the data source.
      operationId: 'gTrends.exists__get_gTrends_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/gTrends/{id}':
    head:
      tags:
        - gTrends
      summary: Check whether a model instance exists in the data source.
      operationId: 'gTrends.exists__head_gTrends_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - gTrends
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: gTrends.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
    delete:
      tags:
        - gTrends
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: gTrends.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - gTrends
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'gTrends.prototype.updateAttributes__put_gTrends_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/gTrends'
        - name: id
          in: path
          description: gTrends id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
    patch:
      tags:
        - gTrends
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'gTrends.prototype.updateAttributes__patch_gTrends_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/gTrends'
        - name: id
          in: path
          description: gTrends id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
  '/gTrends/{id}/replace':
    post:
      tags:
        - gTrends
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: gTrends.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
  /gTrends/findOne:
    get:
      tags:
        - gTrends
      summary: Find first instance of the model matched by filter from the data source.
      operationId: gTrends.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/gTrends'
      deprecated: false
  /gTrends/update:
    post:
      tags:
        - gTrends
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: gTrends.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/gTrends'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /gTrends/count:
    get:
      tags:
        - gTrends
      summary: Count instances of the model matched by where from the data source.
      operationId: gTrends.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  Car:
    properties:
      id:
        type: string
      vin:
        type: string
      year:
        type: number
        format: double
      make:
        type: string
      model:
        type: string
      image:
        type: string
      carClass:
        type: string
      color:
        type: string
    required:
      - id
    additionalProperties: false
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  Customer:
    properties:
      id:
        maxLength: 20
        type: string
      name:
        maxLength: 40
        type: string
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
    required:
      - id
      - email
    additionalProperties: false
  Inventory:
    properties:
      id:
        maxLength: 20
        type: string
      productId:
        maxLength: 20
        type: string
      locationId:
        maxLength: 20
        type: string
      available:
        maxLength: 22
        type: number
        format: double
      total:
        maxLength: 22
        type: number
        format: double
    required:
      - id
      - productId
      - locationId
    additionalProperties: false
  Location:
    properties:
      id:
        maxLength: 20
        type: string
      street:
        maxLength: 64
        type: string
      city:
        maxLength: 64
        type: string
      zipcode:
        maxLength: 20
        type: number
        format: double
      name:
        maxLength: 32
        type: string
      geo:
        $ref: '#/definitions/GeoPoint'
    required:
      - id
    additionalProperties: false
  GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
  Note:
    properties:
      id:
        type: number
        format: double
    additionalProperties: false
  gTrends:
    properties:
      searchParam:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
